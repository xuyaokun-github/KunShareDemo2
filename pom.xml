<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.12</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.kunghsu</groupId>
    <artifactId>kunsharedemo2</artifactId>
    <version>1.0.0</version>
    <!-- 假如需要访问工程内的前端，用war -->
<!--    <packaging>war</packaging>-->
    <packaging>jar</packaging>
    <name>demo</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <skipTests>true</skipTests>
        <!-- 这个值通常会由Jenkins生成 -->
        <build.number>1</build.number>
        <spring-cloud.version>2021.0.8</spring-cloud.version>
        <!-- 高版本springboot2.7.12，仍能兼容低版本sentinel 1.5.1(但建议最好还是升到建议的版本)  -->
<!--        <spring-cloud-alibaba.version>1.5.1.RELEASE</spring-cloud-alibaba.version>-->
        <spring-cloud-alibaba.version>2021.0.5.0</spring-cloud-alibaba.version>
        <flink.version>1.12.0</flink.version>
        <scala.binary.version>2.12</scala.binary.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>spring-boot-starter-logging</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 解决程序包javax.validation不存在问题 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- spring cloud config -->
        <!-- 在springboot2.7.12版本要加spring-cloud-starter-bootstrap -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>

        <!-- eureka -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>

        <!-- ribbon
            springboot2.1.6版本中，无需指定version
            高版本springboot2.7.12需要主动指定version,但官方已经不建议用，用ribbon会导致启动报错，应该注释掉，引入spring-cloud-loadbalancer-->
<!--        <dependency>-->
<!--            <groupId>org.springframework.cloud</groupId>-->
<!--            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>-->
<!--            <version>2.2.10.RELEASE</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-loadbalancer</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-httpclient</artifactId>
        </dependency>

        <!-- 引入hystrix -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
            <!-- 20231208记录：目前hystrix最新版本是2.2.10.RELEASE，支持springboot2.3.12  -->
            <version>2.2.10.RELEASE</version>
        </dependency>


        <!-- 分布式服务跟踪 -->
        <!-- zipkin
            springboot2.1.6版本中，无需指定version
            高版本springboot2.7.12需要主动指定version(高版本已经移除该module，建议不要再引入) 应该用 spring-cloud-sleuth-zipkin-->
<!--        <dependency>-->
<!--            <groupId>org.springframework.cloud</groupId>-->
<!--            <artifactId>spring-cloud-starter-zipkin</artifactId>-->
<!--            <version>2.2.8.RELEASE</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>

        <!-- spring cloud task start -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-task</artifactId>
        </dependency>
        <!-- spring cloud task end -->

        <!-- spring cloud task 与 batch集成 -->
        <!--        <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-task-batch</artifactId>
                </dependency>-->


        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.4</version>
        </dependency>
        <!-- alibaba的druid数据库连接池 -->
        <!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.20</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <!-- springboot2.7.12 可以继续用5.1.47版本 -->
            <version>5.1.47</version>
            <!-- 注释掉runtime，方便看源码时debug -->
<!--            <scope>runtime</scope>-->
<!--            <version>8.0.33</version>-->
        </dependency>

        <!-- 分页插件 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <!-- 解决循环依赖问题，需要设置版本为1.4.1 -->
            <version>1.4.1</version>
        </dependency>

        <!-- 引入JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!--
                <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                    <scope>runtime</scope>
                </dependency>-->

        <!-- 引入lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>


        <!-- log4j2 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.3.6</version>
        </dependency>
        <!-- log4j2 end -->

        <!-- json -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.60</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <!--
                        <scope>provided</scope>
            -->
        </dependency>

<!--        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <!-- 切换log4j2日志读取 -->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.9</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>

        <!-- PowerMock JUnit 4.4+ Module -->
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>2.0.0</version>
            <scope>test</scope>
        </dependency>

        <!-- PowerMock Mockito2 API -->
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito2</artifactId>
            <version>2.0.0</version>
            <scope>test</scope>
        </dependency>

        <!-- spring batch -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-batch</artifactId>
        </dependency>

        <!-- quartz -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-quartz</artifactId>
        </dependency>


        <!-- 数据库层单测 start-->
        <dependency>
            <groupId>com.github.springtestdbunit</groupId>
            <artifactId>spring-test-dbunit</artifactId>
            <version>1.3.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.dbunit</groupId>
            <artifactId>dbunit</artifactId>
            <version>2.5.3</version>
            <!-- 与easyexcel组件有冲突 -->
            <exclusions>
                <exclusion>
                    <groupId>org.apache.poi</groupId>
                    <artifactId>poi-ooxml</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.poi</groupId>
                    <artifactId>poi-ooxml-schemas</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 数据库层单测 end-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>

        <!-- spring redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>io.lettuce</groupId>
                    <artifactId>lettuce-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- springboot2.1.6用：2.9.0
             springboot2.7.12用：3.8.0
            解决java.lang.ClassNotFoundException: redis.clients.jedis.util.SafeEncoder
        -->
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
        </dependency>

        <!-- Spring-boot session manager -->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>

        <!-- Redisson start-->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson-spring-boot-starter</artifactId>
            <version>3.11.4</version>
        </dependency>
        <!-- Redisson end-->

        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.3</version>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpmime</artifactId>
            <version>4.5.3</version>
        </dependency>

        <!-- 引入私服的包 -->
<!--        <dependency>
            <groupId>com.kunghsu</groupId>
            <artifactId>kunnexusdemo</artifactId>
            <version>1.1.5</version>
        </dependency>-->

        <!-- JWT -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.1</version>
        </dependency>

        <!-- 分库分表中间件shardingsphere start-->
        <dependency>
            <groupId>org.apache.shardingsphere</groupId>
            <artifactId>sharding-jdbc-spring-boot-starter</artifactId>
            <version>4.0.0-RC1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shardingsphere</groupId>
            <artifactId>sharding-core-common</artifactId>
            <version>4.0.0-RC1</version>
        </dependency>
        <!-- 分库分表中间件shardingsphere end-->

        <!-- dbcp2数据库连接池 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
        </dependency>

        <!-- 执行远程shell命令 -->
        <dependency>
            <groupId>com.jcraft</groupId>
            <artifactId>jsch</artifactId>
            <version>0.1.53</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>

        <!-- spring-cache -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>

        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
            <version>2.6.2</version>
        </dependency>

        <!-- 引入XXL-JOB-->
        <dependency>
            <groupId>com.xuxueli</groupId>
            <artifactId>xxl-job-core</artifactId>
            <version>2.1.2</version>
        </dependency>

        <!-- springboot-elasticsearch -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
        </dependency>

        <!-- Google 开源的集合框架包
            布隆过滤器依赖该坐标-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>30.1.1-jre</version>
        </dependency>

        <!-- springdoc（swagger3） -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
            <version>1.7.0</version>
        </dependency>

        <!-- alibaba cloud -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>

        <!-- xml解析 -->
        <dependency>
            <groupId>dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>1.6.1</version>
        </dependency>

        <!-- 邮件start -->
        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
            <version>1.4.7</version>
        </dependency>
        <!-- 邮件end -->

        <!-- alibaba canal start -->
        <dependency>
            <groupId>com.alibaba.otter</groupId>
            <artifactId>canal.client</artifactId>
            <version>1.1.5</version>
            <exclusions>
                <!-- logback与log4j2有依赖冲突 -->
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.alibaba.otter</groupId>
            <artifactId>canal.protocol</artifactId>
            <version>1.1.5</version>
            <exclusions>
                <!-- logback与log4j2有依赖冲突 -->
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- alibaba canal end -->

        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <version>1.23</version>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <version>1.23</version>
            <scope>provided</scope>
        </dependency>

        <!-- 与easyexcel冲突，注释掉 -->
<!--        <dependency>-->
<!--            <groupId>org.apache.commons</groupId>-->
<!--            <artifactId>commons-compress</artifactId>-->
<!--            <version>1.12</version>-->
<!--        </dependency>-->

        <!-- Apache Skywalking start -->
        <dependency>
            <groupId>org.apache.skywalking</groupId>
            <artifactId>apm-toolkit-trace</artifactId>
            <!-- 和Skywalking的版本一致即可 -->
            <version>8.8.0</version>
        </dependency>

        <!-- skywalking traceId依赖 -->
        <dependency>
            <groupId>org.apache.skywalking</groupId>
            <artifactId>apm-toolkit-log4j-2.x</artifactId>
            <version>8.8.0</version>
        </dependency>
        <!-- Apache Skywalking end -->

        <!-- JDBC工具类 -->
        <dependency>
            <groupId>commons-dbutils</groupId>
            <artifactId>commons-dbutils</artifactId>
            <version>1.6</version>
        </dependency>

<!--        <dependency>-->
<!--            <groupId>org.eclipse.jetty</groupId>-->
<!--            <artifactId>jetty-util</artifactId>-->
<!--            <version>9.4.31.v20200723</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>easyexcel</artifactId>
            <version>3.3.2</version>
        </dependency>

    </dependencies>

<!--    <repositories>
        <repository>
            &lt;!&ndash; Maven 自带的中央仓库使用的Id为central
               如果其他的仓库声明也是用该Id 就会覆盖中央仓库的配置 &ndash;&gt;
            <id>kunghsu_nexus_repo</id>
            <name>kunghsu_nexus_repo</name>
            <url>http://192.168.3.105:8081/repository/kunghsu_nexus_repo/</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>-->


    <!--发布到私服仓库配置-->
<!--    <distributionManagement>
        &lt;!&ndash; proxy类型的仓库不支持deploy &ndash;&gt;
        &lt;!&ndash;
                <repository>
                    <id>kunghsu_nexus_repo</id>
                    <name>one</name>
                    <url>http://192.168.3.105:8081/repository/kunghsu_nexus_repo/</url>
                </repository>
         &ndash;&gt;

        &lt;!&ndash; repository标签只能定义一个 &ndash;&gt;
        &lt;!&ndash; kunghsu_nexus_hosted_release_repo只处理release版本
            version policy为release的仓库&ndash;&gt;
        &lt;!&ndash;
                <repository>
                    <id>kunghsu_nexus_hosted_release_repo</id>
                    <name>kunghsu_nexus_hosted_release_repo</name>
                    <url>http://192.168.3.105:8081/repository/kunghsu_nexus_hosted_release_repo/</url>
                </repository>
         &ndash;&gt;

        &lt;!&ndash; version policy为mixed的仓库 &ndash;&gt;
        <repository>
            <id>kunghsu_nexus_hosted_mixed_repo</id>
            <name>kunghsu_nexus_hosted_mixed_repo</name>
            <url>http://192.168.3.105:8081/repository/kunghsu_nexus_hosted_mixed_repo/</url>
        </repository>

        <snapshotRepository>
            <id>kunghsu_nexus_hosted_snapshot_repo</id>
            <name>kunghsu_nexus_hosted_snapshot_repo</name>
            <url>http://192.168.3.105:8081/repository/kunghsu_nexus_hosted_snapshot_repo/</url>
        </snapshotRepository>

    </distributionManagement>-->



    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
<!--        <resources>-->
<!--            <resource>-->
<!--                <directory>src/main/java</directory>-->
<!--                <includes>-->
<!--                    <include>**/*.xml</include>-->
<!--                </includes>-->
<!--            </resource>-->
<!--            <resource>-->
<!--                <directory>src/main/resources</directory>-->
<!--                <includes>-->
<!--                    <include>**/*</include>-->
<!--                </includes>-->
<!--                <filtering>true</filtering>-->
<!--            </resource>-->
<!--        </resources>-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
<!--                <version>3.1.2</version>-->
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <!-- 这里相对的是jar包所在的路径
                                 和jar包同级的位置下，有一个lib文件夹-->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- 此处为主入口-->
<!--                            <mainClass>cn.com.kun.foo.javacommon.agent.BeforeJvmAgent</mainClass>-->
<!--                            <mainClass>cn.com.kun.foo.javacommon.agent.AfterJvmAgent</mainClass>-->
                            <mainClass>cn.com.kun.foo.javacommon.agent.accurate.AccurateTestAgent</mainClass>
                        </manifest>
                        <!-- agent包demo需要用到下面的配置 -->
                        <manifestEntries>
<!--                            <Premain-Class>cn.com.kun.foo.javacommon.agent.BeforeJvmAgent</Premain-Class>-->
<!--                            <Premain-Class>cn.com.kun.foo.javacommon.agent.AfterJvmAgent</Premain-Class>-->
                            <Premain-Class>cn.com.kun.foo.javacommon.agent.accurate.AccurateTestAgent</Premain-Class>
                            <!-- 启动前植入的agent无需指定Agent-Class
                                假如是用attach方式，必须指定Agent-Class-->
<!--                            <Agent-Class>cn.com.kun.foo.javacommon.agent.AfterJvmAgent</Agent-Class>-->
                            <Can-Redefine-Classes>true</Can-Redefine-Classes>
                            <Can-Retransform-Classes>true</Can-Retransform-Classes>
                        </manifestEntries>
                    </archive>
                    <!-- 引入 路径（这个没生效） -->
<!--                    <includes>-->
<!--                        <include>**/agent/**</include>-->
<!--                    </includes>-->
                    <includes>
                        <include>cn/com/kun/foo/javacommon/agent/accurate/**</include>
                    </includes>
                    <excludes>
                        <exclude>testData/**</exclude>
                    </excludes>
                    <!-- 高版本jar插件executions似乎被移除了，会报红  -->
<!--                    <executions>-->
<!--                        <execution>-->
<!--                            <id>copy</id>-->
<!--                            <phase>package</phase>-->
<!--                            <goals>-->
<!--                                <goal>copy-dependencies</goal>-->
<!--                            </goals>-->
<!--                        </execution>-->
<!--                    </executions>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- 这里会将所有依赖的jar包放到target目录下的lib文件夹 -->
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.3</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <!-- 此处为主入口-->
                            <mainClass>cn.com.kun.apache.flink.demo1.LocalRunningDataSourceTest2</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>cn.com.kun.KunShareDemoApplication</mainClass>
                    <addResources>true</addResources>
                    <!-- skip设置为true,可以跳过spring-boot-maven-plugin的执行 -->
                    <!--
                                        <skip>true</skip>
                    -->
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <!-- 如果只想有finalName,不需要连接release.xml中的id -->
                    <appendAssemblyId>false</appendAssemblyId>
                    <finalName>${project.artifactId}-${project.version}-${build.number}</finalName>
                    <!-- 用了descriptor就不需要用descriptorRefs
                        假如希望将第三方依赖打进jar包且能被加载，用jar-with-dependencies-->
                    <!--                    <descriptorRefs>-->
                    <!--                        <descriptorRef>jar-with-dependencies</descriptorRef>-->
                    <!--                    </descriptorRefs>-->
                    <descriptors>
                        <descriptor>src/main/assembly/assembly.xml</descriptor>
                    </descriptors>
                    <archive>
                        <manifest>
                            <!--                            <addClasspath>true</addClasspath>-->
                            <!-- assembly.xml文件里指定了依赖包输出到lib下了，所以这里必须指定classpathPrefix，从lib下找包
                             注意，这里的路径是指jar包外的路径，假如lib放到jar包内是找不到的
                             当把依赖包copy到jar包外时，才有必要指定classpathPrefix-->
                            <!--                            <classpathPrefix>lib/</classpathPrefix>-->
                            <mainClass>cn.com.kun.apache.flink.FlinkDemoCommonEntrance</mainClass>
                        </manifest>
                        <archive>
                            <manifestEntries>
                                <Premain-Class>cn.com.kun.foo.javacommon.agent.accurate.AccurateTestAgent</Premain-Class>
                            </manifestEntries>
                        </archive>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>false</skipTests>
                    <!-- methods：并行模式是方法级别
                        classes：类级别-->
                    <parallel>classes</parallel>
                    <threadCount>5</threadCount>
                </configuration>
            </plugin>
        </plugins>

    </build>

</project>
